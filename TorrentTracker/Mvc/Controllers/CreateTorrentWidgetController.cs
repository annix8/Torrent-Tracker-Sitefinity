/* ------------------------------------------------------------------------------
<auto-generated>
    This file was generated by Sitefinity CLI v1.0.0.4
</auto-generated>
------------------------------------------------------------------------------ */

using SitefinityWebApp.Mvc.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Mvc;
using Telerik.Sitefinity;
using Telerik.Sitefinity.Data;
using Telerik.Sitefinity.DynamicModules;
using Telerik.Sitefinity.DynamicModules.Model;
using Telerik.Sitefinity.Libraries.Model;
using Telerik.Sitefinity.Lifecycle;
using Telerik.Sitefinity.Model;
using Telerik.Sitefinity.Modules.Libraries;
using Telerik.Sitefinity.Mvc;
using Telerik.Sitefinity.RelatedData;
using Telerik.Sitefinity.Security.Claims;
using Telerik.Sitefinity.Utilities.TypeConverters;
using Telerik.Sitefinity.Versioning;
using Telerik.Sitefinity.Workflow;

namespace SitefinityWebApp.Mvc.Controllers
{
    [ControllerToolboxItem(Name = "CreateTorrentWidget_MVC", Title = "CreateTorrentWidget", SectionName = "CustomWidgets")]
    public class CreateTorrentWidgetController : Controller
    {
        // GET: CreateTorrentWidget
        public ActionResult Index()
        {
            var model = new CreateTorrentWidgetModel();
            return View(model);
        }

        [HttpPost]
        public ActionResult Index(CreateTorrentWidgetModel model)
        {
            string resultMessage = string.Empty;
            try
            {
                var imageGuid = Guid.NewGuid();
                var userImageData = model.UserImageData;
                //CreateImageWithNativeAPI(imageGuid, $"{userImageData.FileName}{imageGuid}", userImageData.InputStream, userImageData.FileName, Path.GetExtension(userImageData.FileName));
                string torrentName = model.UserTorrentData.FileName;
                string imageName = model.UserImageData.FileName;
                resultMessage = $"Torrent name: {torrentName}\n Title: {model.Title} Image name: {imageName}";
            }
            catch (Exception exc)
            {
                resultMessage = exc.Message;

                if (exc.InnerException != null)
                {
                    resultMessage += $"{Environment.NewLine}{exc.InnerException.Message}";
                }
            }

            
            return Content(resultMessage);
        }
    }
}