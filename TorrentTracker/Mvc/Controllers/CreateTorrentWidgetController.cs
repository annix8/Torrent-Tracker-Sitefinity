/* ------------------------------------------------------------------------------
<auto-generated>
    This file was generated by Sitefinity CLI v1.0.0.4
</auto-generated>
------------------------------------------------------------------------------ */

using SitefinityWebApp.Mvc.Models;
using SitefinityWebApp.TorrentTrackerServices;
using SitefinityWebApp.TorrentTrackerServices.Contracts;
using SitefinityWebApp.TorrentTrackerServices.Dtos;
using System;
using System.Text;
using System.Web.Mvc;
using Telerik.Sitefinity.Mvc;

namespace SitefinityWebApp.Mvc.Controllers
{
    [ControllerToolboxItem(Name = "CreateTorrentWidget_MVC", Title = "Create Torrent", SectionName = "Create torrents")]
    public class CreateTorrentWidgetController : Controller
    {
        private readonly ITorrentService _torrentService;
        private readonly ITaxonomyService _taxonomyService;
        private readonly IModelStateValidatorService _modelStateValidatorService;

        public CreateTorrentWidgetController(ITorrentService torrentService,
            ITaxonomyService taxonomyService,
            IModelStateValidatorService modelStateValidatorService)
        {
            _torrentService = torrentService;
            _taxonomyService = taxonomyService;
            _modelStateValidatorService = modelStateValidatorService;
        }

        public ActionResult Index()
        {
            CreateTorrentWidgetModel model = CreateInitialTorrentWidgetModel();
            return View(model);
        }

        [HttpPost]
        public ActionResult Index(CreateTorrentWidgetModel model)
        {
            if (!_modelStateValidatorService.Validate(ModelState, model))
            {
                // quick solution to populate genres when invalid data is passed on Add torrent
                var genres = _taxonomyService.GetTaxonNamesByTaxonomy(Constants.GenresTaxonomyName);
                model.Genres = genres;
                return View(model);
            }

            StringBuilder sb = new StringBuilder();
            try
            {
                CreateTorrentDto torrent = DtoCreator.CreateTorrent(model);
                _torrentService.CreateTorrentWithPublish(torrent);

                sb.AppendLine(string.Format(Constants.CreateTorrentSuccessMessage, model.Title));
                TempData.Add(Constants.SuccessMessageKey, sb.ToString());
            }
            catch (Exception exc)
            {
                sb.AppendLine(exc.Message);

                if (exc.InnerException != null)
                {
                    sb.AppendLine(exc.InnerException.Message);
                }
                
                TempData.Add(Constants.ErrorMessageKey, sb.ToString());
            }

            return RedirectToAction(nameof(CreateTorrentWidgetController.Index));
        }

        private CreateTorrentWidgetModel CreateInitialTorrentWidgetModel()
        {
            var genres = _taxonomyService.GetTaxonNamesByTaxonomy(Constants.GenresTaxonomyName);
            return new CreateTorrentWidgetModel()
            {
                Genres = genres
            };
        }
    }
}