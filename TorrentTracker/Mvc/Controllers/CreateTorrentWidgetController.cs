/* ------------------------------------------------------------------------------
<auto-generated>
    This file was generated by Sitefinity CLI v1.0.0.4
</auto-generated>
------------------------------------------------------------------------------ */

using SitefinityWebApp.Mvc.Models;
using SitefinityWebApp.TorrentTrackerServices;
using System;
using System.IO;
using System.Text;
using System.Web.Mvc;
using Telerik.Sitefinity.Mvc;

namespace SitefinityWebApp.Mvc.Controllers
{
    [ControllerToolboxItem(Name = "CreateTorrentWidget_MVC", Title = "CreateTorrentWidget", SectionName = "CustomWidgets")]
    public class CreateTorrentWidgetController : Controller
    {
        private readonly ImageService _imageService;
        private readonly TorrentService _torrentService;
        private readonly DocumentService _documentService;

        public CreateTorrentWidgetController()
        {
            _imageService = new ImageService();
            _torrentService = new TorrentService();
            _documentService = new DocumentService();
        }
        
        public ActionResult Index()
        {
            var model = new CreateTorrentWidgetModel();
            return View(model);
        }

        [HttpPost]
        public ActionResult Index(CreateTorrentWidgetModel model)
        {
            StringBuilder sb = new StringBuilder();
            try
            {
                Guid imageGuid = Guid.NewGuid();
                Guid torrentDocumentGuid = Guid.NewGuid();
                string imageTitle = $"{model.Title}-{imageGuid}";
                string torrentTitle = $"{model.Title}-{torrentDocumentGuid}";
                _imageService.CreateImageWithNativeAPI(imageGuid, imageTitle, model.UserImageData.InputStream, model.UserImageData.FileName, Path.GetExtension(model.UserImageData.FileName));
                _documentService.CreateDocumentNativeAPI(torrentDocumentGuid, torrentTitle, model.UserTorrentData.InputStream, model.UserTorrentData.FileName, Path.GetExtension(model.UserTorrentData.FileName));
                _torrentService.CreateTorrentWithPublish(model);
                string torrentName = model.UserTorrentData.FileName;
                string imageName = model.UserImageData.FileName;
                sb.AppendLine($"Torrent created. Title: {model.Title}   Torrent name: {torrentName}");
            }
            catch (Exception exc)
            {
                sb.AppendLine(exc.Message);

                if (exc.InnerException != null)
                {
                    sb.AppendLine(exc.InnerException.Message);
                }
            }
            
            return Content(sb.ToString());
        }
    }
}